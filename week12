{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "gpuClass": "standard",
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Keshu321/AI_week_9-16/blob/main/week12\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## A temprature forecasting example"
      ],
      "metadata": {
        "id": "eNGFe8194qtJ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SAKIN5Tb4UFO",
        "outputId": "80e7734a-18ab-4af6-eaa4-42ebfa7d3690"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-11-22 15:05:03--  https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\n",
            "Resolving s3.amazonaws.com (s3.amazonaws.com)... 54.231.200.40, 52.216.205.125, 54.231.129.112, ...\n",
            "Connecting to s3.amazonaws.com (s3.amazonaws.com)|54.231.200.40|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 13565642 (13M) [application/zip]\n",
            "Saving to: ‘jena_climate_2009_2016.csv.zip’\n",
            "\n",
            "jena_climate_2009_2 100%[===================>]  12.94M  18.9MB/s    in 0.7s    \n",
            "\n",
            "2022-11-22 15:05:04 (18.9 MB/s) - ‘jena_climate_2009_2016.csv.zip’ saved [13565642/13565642]\n",
            "\n",
            "Archive:  jena_climate_2009_2016.csv.zip\n",
            "  inflating: jena_climate_2009_2016.csv  \n",
            "  inflating: __MACOSX/._jena_climate_2009_2016.csv  \n"
          ]
        }
      ],
      "source": [
        "!wget https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\n",
        "!unzip jena_climate_2009_2016.csv.zip"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Inspecting the data of the Jena weather dataset"
      ],
      "metadata": {
        "id": "JCRRJd315Pi5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "fname=os.path.join(\"jena_climate_2009_2016.csv\")\n",
        "\n",
        "with open(fname) as f:\n",
        "  data=f.read()\n",
        "\n",
        "lines=data.split(\"\\n\")\n",
        "header=lines[0].split(\",\")\n",
        "lines=lines[1:]\n",
        "print(header)\n",
        "print(len(lines))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "voRtRJ9E4wzL",
        "outputId": "5b43dd19-64d0-4093-cfb9-b4c2053db3bd"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['\"Date Time\"', '\"p (mbar)\"', '\"T (degC)\"', '\"Tpot (K)\"', '\"Tdew (degC)\"', '\"rh (%)\"', '\"VPmax (mbar)\"', '\"VPact (mbar)\"', '\"VPdef (mbar)\"', '\"sh (g/kg)\"', '\"H2OC (mmol/mol)\"', '\"rho (g/m**3)\"', '\"wv (m/s)\"', '\"max. wv (m/s)\"', '\"wd (deg)\"']\n",
            "420451\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Parsing the data"
      ],
      "metadata": {
        "id": "Np4m7AL55ZFo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "temperature=np.zeros((len(lines),))\n",
        "raw_data=np.zeros((len(lines), len(header)-1))\n",
        "for i, line in enumerate(lines):\n",
        "  values=[float(x) for x in line.split(\",\")[1:]]\n",
        "  temperature[i]=values[1]\n",
        "  raw_data[i, :]=values[:]"
      ],
      "metadata": {
        "id": "DHYXcar35XDS"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting the temperature time series"
      ],
      "metadata": {
        "id": "9CgvT6Ub6Aru"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot as plt\n",
        "plt.plot(range(len(temperature)), temperature)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "0jOegJBd57Rk",
        "outputId": "440b87dc-7a23-4ab5-d620-7a329c37743a"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f6292decc90>]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting the first 10 days of the temperature time series"
      ],
      "metadata": {
        "id": "tENDp7Ay6bVi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(range(1440), temperature[:1440])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "b_u75jg76Z-G",
        "outputId": "0d66779a-1a0b-44ee-a916-a35b4cb3a9e2"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f628a496850>]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Computing the number of samples we'll use for each data split"
      ],
      "metadata": {
        "id": "kmZ4XET06rJX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_train_samples=int(0.5*len(raw_data))\n",
        "num_val_samples=int(0.25*len(raw_data))\n",
        "num_test_samples=len(raw_data)-num_train_samples-num_val_samples\n",
        "print(\"num_train_samples: \", num_train_samples)\n",
        "print(\"num_val_samples: \", num_val_samples)\n",
        "print(\"num_test_samples: \", num_test_samples)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QLkkmh3g6oYb",
        "outputId": "296c66ff-66fb-4308-87b0-96235a3280a9"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "num_train_samples:  210225\n",
            "num_val_samples:  105112\n",
            "num_test_samples:  105114\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Preparing the data\n",
        "\n",
        "Normalizing the data"
      ],
      "metadata": {
        "id": "zt3Xv8SC7qp_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mean=raw_data[:num_train_samples].mean(axis=0)\n",
        "raw_data-=mean\n",
        "std=raw_data[:num_train_samples].std(axis=0)\n",
        "raw_data/=std"
      ],
      "metadata": {
        "id": "cu1r1oiH7Ul9"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from tensorflow import keras\n",
        "int_sequence=np.arange(10)\n",
        "dummy_dataset=keras.utils.timeseries_dataset_from_array(\n",
        "    data=int_sequence[:-3],\n",
        "    targets=int_sequence[3:],\n",
        "    sequence_length=3,\n",
        "    batch_size=2,\n",
        ")\n",
        "\n",
        "for inputs, targets in dummy_dataset:\n",
        "  for i in range(inputs.shape[0]):\n",
        "    print([int(x) for x in inputs[i]], int(targets[i]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZwwVqMn_8B0z",
        "outputId": "6fea9652-96a8-4a5d-f232-30f8dee8ccdb"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 2] 3\n",
            "[1, 2, 3] 4\n",
            "[2, 3, 4] 5\n",
            "[3, 4, 5] 6\n",
            "[4, 5, 6] 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Instantiating datasets for training, validation and testing"
      ],
      "metadata": {
        "id": "iLTYBgqN84-t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sampling_rate=6\n",
        "sequence_length=120\n",
        "delay=sampling_rate*(sequence_length+24-1)\n",
        "batch_size=256\n",
        "\n",
        "train_dataset=keras.utils.timeseries_dataset_from_array(\n",
        "    raw_data[:-delay],\n",
        "    targets=temperature[delay:],\n",
        "    sampling_rate=sampling_rate,\n",
        "    sequence_length=sequence_length,\n",
        "    shuffle=True,\n",
        "    batch_size=batch_size,\n",
        "    start_index=0,\n",
        "    end_index=num_train_samples\n",
        ")\n",
        "\n",
        "val_dataset=keras.utils.timeseries_dataset_from_array(\n",
        "    raw_data[:-delay],\n",
        "    targets=temperature[delay:],\n",
        "    sampling_rate=sampling_rate,\n",
        "    sequence_length=sequence_length,\n",
        "    shuffle=True,\n",
        "    batch_size=batch_size,\n",
        "    start_index=num_train_samples,\n",
        "    end_index=num_train_samples+num_val_samples\n",
        ")\n",
        "\n",
        "test_dataset=keras.utils.timeseries_dataset_from_array(\n",
        "    raw_data[:-delay],\n",
        "    targets=temperature[delay:],\n",
        "    sampling_rate=sampling_rate,\n",
        "    sequence_length=sequence_length,\n",
        "    shuffle=True,\n",
        "    batch_size=batch_size,\n",
        "    start_index=num_train_samples,\n",
        ")"
      ],
      "metadata": {
        "id": "6dI8Id_V9Tmn"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Inspecting the output of one of our datasets"
      ],
      "metadata": {
        "id": "Chq7GhNX_EZZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for samples, targets in train_dataset:\n",
        "  print(\"samples shape: \", samples.shape)\n",
        "  print(\"targets shape: \", targets.shape)\n",
        "  break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-6l9UMe-_Csg",
        "outputId": "47330508-ac51-40a5-ec9b-3ebcfeb4b09c"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "samples shape:  (256, 120, 14)\n",
            "targets shape:  (256,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## A common-sense, non-machine-learning baseline\n",
        "\n",
        "Computing the common-sense baseline MAE"
      ],
      "metadata": {
        "id": "34eA3jvZ_dvf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate_naive_method(dataset):\n",
        "  total_abs_err=0.\n",
        "  samples_seen=0\n",
        "  for samples, targets in dataset:\n",
        "    preds=samples[:, -1, 1]*std[1]+mean[1]\n",
        "    total_abs_err+=np.sum(np.abs(preds-targets))\n",
        "    samples_seen+=samples.shape[0]\n",
        "  return total_abs_err/samples_seen\n",
        "\n",
        "print(f\"Validation MAE: {evaluate_naive_method(val_dataset):.2f}\")\n",
        "print(f\"Test MAE: {evaluate_naive_method(test_dataset):.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3WZw--Yy_Xwq",
        "outputId": "b7a7cf00-5b0c-43a8-c924-0507b0845de7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation MAE: 2.44\n",
            "Test MAE: 2.53\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Let's try a basic machine-learning model\n",
        "\n",
        "Training and evaluating a densely connected model"
      ],
      "metadata": {
        "id": "C9MAcKwlAwt0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "inputs=keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n",
        "x=layers.Flatten()(inputs)\n",
        "x=layers.Dense(16, activation=\"relu\")(x)\n",
        "outputs=layers.Dense(1)(x)\n",
        "model=keras.Model(inputs, outputs)\n",
        "\n",
        "callbacks=[\n",
        "    keras.callbacks.ModelCheckpoint(\"jena_dense.keras\", save_best_only=True)\n",
        "]\n",
        "model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "history=model.fit(train_dataset,\n",
        "                  epochs=10,\n",
        "                  validation_data=val_dataset,\n",
        "                  callbacks=callbacks)\n",
        "\n",
        "model=keras.models.load_model(\"jena_dense.keras\")\n",
        "print(f\"Test MAE: {model.evaluate(test_dataset)[1]:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vOCCfGYnAuYv",
        "outputId": "119b89c4-282f-48d9-f9f8-2d64992378ea"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "819/819 [==============================] - 41s 47ms/step - loss: 11.9494 - mae: 2.6845 - val_loss: 11.1668 - val_mae: 2.6370\n",
            "Epoch 2/10\n",
            "819/819 [==============================] - 38s 46ms/step - loss: 8.8702 - mae: 2.3440 - val_loss: 10.1764 - val_mae: 2.5302\n",
            "Epoch 3/10\n",
            "819/819 [==============================] - 38s 46ms/step - loss: 8.1270 - mae: 2.2432 - val_loss: 13.7217 - val_mae: 2.9347\n",
            "Epoch 4/10\n",
            "819/819 [==============================] - 37s 45ms/step - loss: 7.7131 - mae: 2.1860 - val_loss: 10.2207 - val_mae: 2.5332\n",
            "Epoch 5/10\n",
            "819/819 [==============================] - 37s 45ms/step - loss: 7.4387 - mae: 2.1478 - val_loss: 16.1427 - val_mae: 3.2090\n",
            "Epoch 6/10\n",
            "819/819 [==============================] - 38s 46ms/step - loss: 7.2316 - mae: 2.1159 - val_loss: 10.4594 - val_mae: 2.5620\n",
            "Epoch 7/10\n",
            "819/819 [==============================] - 38s 46ms/step - loss: 7.0589 - mae: 2.0913 - val_loss: 10.3565 - val_mae: 2.5484\n",
            "Epoch 8/10\n",
            "819/819 [==============================] - 37s 45ms/step - loss: 6.9314 - mae: 2.0753 - val_loss: 11.1756 - val_mae: 2.6586\n",
            "Epoch 9/10\n",
            "819/819 [==============================] - 38s 46ms/step - loss: 6.7896 - mae: 2.0552 - val_loss: 10.6042 - val_mae: 2.5834\n",
            "Epoch 10/10\n",
            "819/819 [==============================] - 37s 45ms/step - loss: 6.6852 - mae: 2.0382 - val_loss: 11.4417 - val_mae: 2.6806\n",
            "816/816 [==============================] - 25s 30ms/step - loss: 10.7160 - mae: 2.5890\n",
            "Test MAE: 2.59\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting results"
      ],
      "metadata": {
        "id": "nkwI6ZAoEio3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "loss=history.history[\"mae\"]\n",
        "val_loss=history.history[\"val_mae\"]\n",
        "epochs=range(1, len(loss)+1)\n",
        "plt.figure()\n",
        "plt.plot(epochs, loss, \"bo\", label=\"Training MAE\")\n",
        "plt.plot(epochs, val_loss, \"b\", label=\"Validation MAE\")\n",
        "plt.title(\"Training and validation MAE\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "-0IRIq8GESx2",
        "outputId": "dfa4f7e5-3286-4310-9389-35a533e6160d"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Let's try a 1D convolutional model"
      ],
      "metadata": {
        "id": "gXx78UFBFjxj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputs=keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n",
        "x= layers.Conv1D(8, 24, activation=\"relu\")(inputs)\n",
        "x=layers.MaxPooling1D(2)(x)\n",
        "x= layers.Conv1D(8, 12, activation=\"relu\")(x)\n",
        "x=layers.MaxPooling1D(2)(x)\n",
        "x= layers.Conv1D(8, 6, activation=\"relu\")(x)\n",
        "x= layers.GlobalAveragePooling1D()(x)\n",
        "outputs=layers.Dense(1)(x)\n",
        "model=keras.Model(inputs, outputs)\n",
        "\n",
        "callbacks=[\n",
        "    keras.callbacks.ModelCheckpoint(\"jena_conv.keras\", save_best_only=True)\n",
        "]\n",
        "model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "history=model.fit(train_dataset,\n",
        "                  epochs=10,\n",
        "                  validation_data=val_dataset,\n",
        "                  callbacks=callbacks)\n",
        "\n",
        "model=keras.models.load_model(\"jena_conv.keras\")\n",
        "print(f\"Test MAE: {model.evaluate(test_dataset)[1]:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DfLsVqwiFsJB",
        "outputId": "554c127b-8fc6-4078-e91b-0b6eb3f679be"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "819/819 [==============================] - 46s 48ms/step - loss: 21.9370 - mae: 3.6727 - val_loss: 17.3976 - val_mae: 3.2710\n",
            "Epoch 2/10\n",
            "819/819 [==============================] - 39s 48ms/step - loss: 15.1251 - mae: 3.0878 - val_loss: 14.7731 - val_mae: 3.0094\n",
            "Epoch 3/10\n",
            "819/819 [==============================] - 39s 47ms/step - loss: 13.6632 - mae: 2.9228 - val_loss: 14.8734 - val_mae: 3.0540\n",
            "Epoch 4/10\n",
            "819/819 [==============================] - 40s 49ms/step - loss: 12.8359 - mae: 2.8275 - val_loss: 13.7168 - val_mae: 2.8917\n",
            "Epoch 5/10\n",
            "819/819 [==============================] - 40s 48ms/step - loss: 12.1470 - mae: 2.7485 - val_loss: 13.9501 - val_mae: 2.9355\n",
            "Epoch 6/10\n",
            "819/819 [==============================] - 39s 48ms/step - loss: 11.5888 - mae: 2.6817 - val_loss: 13.5787 - val_mae: 2.8915\n",
            "Epoch 7/10\n",
            "819/819 [==============================] - 39s 48ms/step - loss: 11.1584 - mae: 2.6343 - val_loss: 14.8873 - val_mae: 3.0149\n",
            "Epoch 8/10\n",
            "819/819 [==============================] - 40s 48ms/step - loss: 10.7916 - mae: 2.5890 - val_loss: 13.6396 - val_mae: 2.8847\n",
            "Epoch 9/10\n",
            "819/819 [==============================] - 39s 47ms/step - loss: 10.5111 - mae: 2.5578 - val_loss: 13.7386 - val_mae: 2.9114\n",
            "Epoch 10/10\n",
            "819/819 [==============================] - 41s 50ms/step - loss: 10.2441 - mae: 2.5259 - val_loss: 14.6887 - val_mae: 3.0114\n",
            "816/816 [==============================] - 27s 32ms/step - loss: 13.9584 - mae: 2.9487\n",
            "Test MAE: 2.95\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## A first recurrent baseline\n",
        "\n",
        "A simple LSTM-based model"
      ],
      "metadata": {
        "id": "z2w0AsWMG7cQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputs=keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n",
        "x=layers.LSTM(16)(inputs)\n",
        "outputs=layers.Dense(1)(x)\n",
        "model=keras.Model(inputs, outputs)\n",
        "\n",
        "callbacks=[\n",
        "    keras.callbacks.ModelCheckpoint(\"jena_lstm.keras\", save_best_only=True)\n",
        "]\n",
        "model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "history=model.fit(train_dataset,\n",
        "                  epochs=10,\n",
        "                  validation_data=val_dataset,\n",
        "                  callbacks=callbacks)\n",
        "\n",
        "model=keras.models.load_model(\"jena_lstm.keras\")\n",
        "print(f\"Test MAE: {model.evaluate(test_dataset)[1]:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2SXQtG8XHDP1",
        "outputId": "12f52810-5882-428f-92ad-9b5f54eed67a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "819/819 [==============================] - 45s 52ms/step - loss: 43.0221 - mae: 4.8053 - val_loss: 13.3476 - val_mae: 2.7764\n",
            "Epoch 2/10\n",
            "819/819 [==============================] - 43s 52ms/step - loss: 11.1685 - mae: 2.5966 - val_loss: 10.1461 - val_mae: 2.4765\n",
            "Epoch 3/10\n",
            "819/819 [==============================] - 43s 52ms/step - loss: 9.7229 - mae: 2.4392 - val_loss: 9.8232 - val_mae: 2.4271\n",
            "Epoch 4/10\n",
            "819/819 [==============================] - 43s 52ms/step - loss: 9.3178 - mae: 2.3820 - val_loss: 10.1498 - val_mae: 2.4586\n",
            "Epoch 5/10\n",
            "819/819 [==============================] - 42s 51ms/step - loss: 9.0434 - mae: 2.3448 - val_loss: 10.1324 - val_mae: 2.4553\n",
            "Epoch 6/10\n",
            "819/819 [==============================] - 43s 52ms/step - loss: 8.8389 - mae: 2.3175 - val_loss: 10.0908 - val_mae: 2.4489\n",
            "Epoch 7/10\n",
            "819/819 [==============================] - 44s 53ms/step - loss: 8.6349 - mae: 2.2920 - val_loss: 10.4175 - val_mae: 2.4817\n",
            "Epoch 8/10\n",
            "819/819 [==============================] - 42s 51ms/step - loss: 8.4595 - mae: 2.2680 - val_loss: 10.2551 - val_mae: 2.4688\n",
            "Epoch 9/10\n",
            "819/819 [==============================] - 42s 51ms/step - loss: 8.3282 - mae: 2.2512 - val_loss: 10.5162 - val_mae: 2.5063\n",
            "Epoch 10/10\n",
            "819/819 [==============================] - 43s 52ms/step - loss: 8.2085 - mae: 2.2338 - val_loss: 10.4900 - val_mae: 2.4949\n",
            "816/816 [==============================] - 27s 32ms/step - loss: 10.2847 - mae: 2.5073\n",
            "Test MAE: 2.51\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Understanding the recurrent nerual networks\n",
        "\n",
        "NumPy implementation of a simple RNN"
      ],
      "metadata": {
        "id": "TzIxSvP5Hkqj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "timesteps=100\n",
        "input_features=32\n",
        "output_features=64\n",
        "inputs=np.random.random((timesteps, input_features))\n",
        "state_t=np.zeros((output_features,))\n",
        "W=np.random.random((output_features, input_features))\n",
        "U=np.random.random((output_features, output_features))\n",
        "b=np.random.random((output_features,))\n",
        "successive_outputs=[]\n",
        "for input_t in inputs:\n",
        "  output_t=np.tanh(np.dot(W, input_t)+np.dot(U, state_t)+b)\n",
        "  successive_outputs.append(output_t)\n",
        "  state_t=output_t\n",
        "final_output_sequence=np.stack(successive_outputs, axis=0)"
      ],
      "metadata": {
        "id": "yX03ffGpHsVg"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## A recurrent layer in Keras\n",
        "\n",
        "An RNN layer that can process sequences of any length"
      ],
      "metadata": {
        "id": "YVLpK8iiKEWy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "num_features=14\n",
        "inputs=keras.Input(shape=(None, num_features))\n",
        "outputs=layers.SimpleRNN(16)(inputs)"
      ],
      "metadata": {
        "id": "I8HY7RzlKTER"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "An RNN layer that returns only its last output step"
      ],
      "metadata": {
        "id": "AeowXBKIKz8r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_features=14\n",
        "steps=120\n",
        "inputs=keras.Input(shape=(steps, num_features))\n",
        "outputs=layers.SimpleRNN(16, return_sequences=False)(inputs)\n",
        "print(outputs.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EFEOyRFzK5Ap",
        "outputId": "2c5a13d6-0f45-43b8-fe8b-801a4ef8e547"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(None, 16)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "An RNN layer that returns its full output sequence"
      ],
      "metadata": {
        "id": "8SIJEjyMLUZY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_features=14\n",
        "steps=120\n",
        "inputs=keras.Input(shape=(steps, num_features))\n",
        "outputs=layers.SimpleRNN(16, return_sequences=True)(inputs)\n",
        "print(outputs.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BC4grbX0LZ6H",
        "outputId": "d88d5dd4-e277-46da-a34c-cdf86fd3e976"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(None, 120, 16)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Stacking RNN layers"
      ],
      "metadata": {
        "id": "5VNbZsAGLhUu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputs=keras.Input(shape=(steps, num_features))\n",
        "x=layers.SimpleRNN(16, return_sequences=True)(inputs)\n",
        "x=layers.SimpleRNN(16, return_sequences=True)(x)\n",
        "outputs=layers.SimpleRNN(16)(x)"
      ],
      "metadata": {
        "id": "NByOfYJbLkDs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Advanced use of recurrent neural networks"
      ],
      "metadata": {
        "id": "V4b03lwxL-6g"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Using recurrent dropout to fight overfitting\n",
        "\n",
        "Training and evaluating a dropout-regularized LSTM"
      ],
      "metadata": {
        "id": "lQt9y1C_PiEc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "inputs=keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n",
        "x=layers.LSTM(32, recurrent_dropout=0.25)(inputs)\n",
        "x=layers.Dropout(0.5)(x)\n",
        "outputs=layers.Dense(1)(x)\n",
        "model=keras.Model(inputs, outputs)\n",
        "\n",
        "callbacks=[\n",
        "    keras.callbacks.ModelCheckpoint(\"jena_lstm_dropout.keras\", save_best_only=True)\n",
        "]\n",
        "model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "history=model.fit(train_dataset,\n",
        "                  epochs=50,\n",
        "                  validation_data=val_dataset,\n",
        "                  callbacks=callbacks)\n",
        "\n",
        "model=keras.models.load_model(\"jena_lstm_dropout.keras\")\n",
        "print(f\"Test MAE: {model.evaluate(test_dataset)[1]:.2f}\")"
      ],
      "metadata": {
        "id": "NPbZAz7LMSAV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9a8fe93e-985f-4454-bc1e-f05f1b12c8c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "819/819 [==============================] - 209s 251ms/step - loss: 27.3276 - mae: 3.8608 - val_loss: 9.9240 - val_mae: 2.4420\n",
            "Epoch 2/50\n",
            "819/819 [==============================] - 209s 255ms/step - loss: 14.7855 - mae: 2.9806 - val_loss: 9.3631 - val_mae: 2.3774\n",
            "Epoch 3/50\n",
            "819/819 [==============================] - 210s 257ms/step - loss: 14.0216 - mae: 2.8980 - val_loss: 9.5821 - val_mae: 2.3964\n",
            "Epoch 4/50\n",
            "819/819 [==============================] - 209s 255ms/step - loss: 13.2407 - mae: 2.8243 - val_loss: 9.7188 - val_mae: 2.4213\n",
            "Epoch 5/50\n",
            "819/819 [==============================] - 210s 256ms/step - loss: 12.7672 - mae: 2.7724 - val_loss: 9.1989 - val_mae: 2.3603\n",
            "Epoch 6/50\n",
            "819/819 [==============================] - 208s 253ms/step - loss: 12.4682 - mae: 2.7362 - val_loss: 9.3244 - val_mae: 2.3733\n",
            "Epoch 7/50\n",
            "819/819 [==============================] - 208s 253ms/step - loss: 12.0983 - mae: 2.6940 - val_loss: 9.4707 - val_mae: 2.3896\n",
            "Epoch 8/50\n",
            "819/819 [==============================] - 207s 252ms/step - loss: 11.7391 - mae: 2.6562 - val_loss: 9.3719 - val_mae: 2.3890\n",
            "Epoch 9/50\n",
            "819/819 [==============================] - 208s 254ms/step - loss: 11.4583 - mae: 2.6263 - val_loss: 9.5944 - val_mae: 2.4033\n",
            "Epoch 10/50\n",
            "819/819 [==============================] - 209s 255ms/step - loss: 11.2909 - mae: 2.6067 - val_loss: 10.0929 - val_mae: 2.4758\n",
            "Epoch 11/50\n",
            "819/819 [==============================] - 208s 254ms/step - loss: 11.0797 - mae: 2.5806 - val_loss: 9.6690 - val_mae: 2.4208\n",
            "Epoch 12/50\n",
            "819/819 [==============================] - 209s 255ms/step - loss: 10.9829 - mae: 2.5680 - val_loss: 9.7652 - val_mae: 2.4394\n",
            "Epoch 13/50\n",
            "819/819 [==============================] - 207s 253ms/step - loss: 10.8083 - mae: 2.5516 - val_loss: 9.6277 - val_mae: 2.4169\n",
            "Epoch 14/50\n",
            "819/819 [==============================] - 208s 254ms/step - loss: 10.7040 - mae: 2.5340 - val_loss: 9.6525 - val_mae: 2.4257\n",
            "Epoch 15/50\n",
            "819/819 [==============================] - 208s 254ms/step - loss: 10.5786 - mae: 2.5233 - val_loss: 9.9291 - val_mae: 2.4535\n",
            "Epoch 16/50\n",
            "819/819 [==============================] - 208s 254ms/step - loss: 10.4539 - mae: 2.5094 - val_loss: 10.0874 - val_mae: 2.4802\n",
            "Epoch 17/50\n",
            "819/819 [==============================] - 208s 254ms/step - loss: 10.2811 - mae: 2.4876 - val_loss: 9.8371 - val_mae: 2.4510\n",
            "Epoch 18/50\n",
            "819/819 [==============================] - 209s 254ms/step - loss: 10.2160 - mae: 2.4791 - val_loss: 9.8877 - val_mae: 2.4557\n",
            "Epoch 19/50\n",
            "819/819 [==============================] - 211s 257ms/step - loss: 10.0939 - mae: 2.4670 - val_loss: 10.1992 - val_mae: 2.4922\n",
            "Epoch 20/50\n",
            "819/819 [==============================] - 207s 253ms/step - loss: 9.9781 - mae: 2.4497 - val_loss: 10.1061 - val_mae: 2.4808\n",
            "Epoch 21/50\n",
            "819/819 [==============================] - 209s 254ms/step - loss: 9.9074 - mae: 2.4405 - val_loss: 10.2699 - val_mae: 2.5083\n",
            "Epoch 22/50\n",
            "819/819 [==============================] - 209s 255ms/step - loss: 9.8376 - mae: 2.4319 - val_loss: 10.2799 - val_mae: 2.5109\n",
            "Epoch 23/50\n",
            "819/819 [==============================] - 209s 255ms/step - loss: 9.7787 - mae: 2.4250 - val_loss: 10.4209 - val_mae: 2.5261\n",
            "Epoch 24/50\n",
            "819/819 [==============================] - 209s 254ms/step - loss: 9.6807 - mae: 2.4136 - val_loss: 10.5221 - val_mae: 2.5392\n",
            "Epoch 25/50\n",
            "819/819 [==============================] - 206s 251ms/step - loss: 9.6160 - mae: 2.4031 - val_loss: 10.5121 - val_mae: 2.5304\n",
            "Epoch 26/50\n",
            "819/819 [==============================] - 206s 251ms/step - loss: 9.5091 - mae: 2.3954 - val_loss: 10.5406 - val_mae: 2.5380\n",
            "Epoch 27/50\n",
            "819/819 [==============================] - 209s 255ms/step - loss: 9.4697 - mae: 2.3854 - val_loss: 10.6888 - val_mae: 2.5601\n",
            "Epoch 28/50\n",
            "819/819 [==============================] - 207s 252ms/step - loss: 9.4236 - mae: 2.3793 - val_loss: 10.7535 - val_mae: 2.5640\n",
            "Epoch 29/50\n",
            "819/819 [==============================] - 202s 246ms/step - loss: 9.3594 - mae: 2.3714 - val_loss: 10.5200 - val_mae: 2.5368\n",
            "Epoch 30/50\n",
            "819/819 [==============================] - 199s 243ms/step - loss: 9.3539 - mae: 2.3713 - val_loss: 11.2783 - val_mae: 2.6195\n",
            "Epoch 31/50\n",
            "819/819 [==============================] - 197s 240ms/step - loss: 9.3197 - mae: 2.3652 - val_loss: 10.6278 - val_mae: 2.5544\n",
            "Epoch 32/50\n",
            "819/819 [==============================] - 197s 240ms/step - loss: 9.2391 - mae: 2.3560 - val_loss: 11.2649 - val_mae: 2.6151\n",
            "Epoch 33/50\n",
            "819/819 [==============================] - 197s 240ms/step - loss: 9.1748 - mae: 2.3495 - val_loss: 10.8207 - val_mae: 2.5753\n",
            "Epoch 34/50\n",
            "819/819 [==============================] - 197s 240ms/step - loss: 9.1402 - mae: 2.3422 - val_loss: 10.8778 - val_mae: 2.5823\n",
            "Epoch 35/50\n",
            "819/819 [==============================] - 197s 240ms/step - loss: 9.0635 - mae: 2.3354 - val_loss: 11.5620 - val_mae: 2.6532\n",
            "Epoch 36/50\n",
            "819/819 [==============================] - 202s 246ms/step - loss: 9.1009 - mae: 2.3358 - val_loss: 10.9115 - val_mae: 2.5839\n",
            "Epoch 37/50\n",
            "819/819 [==============================] - 199s 243ms/step - loss: 9.0173 - mae: 2.3273 - val_loss: 11.5399 - val_mae: 2.6478\n",
            "Epoch 38/50\n",
            "819/819 [==============================] - 200s 244ms/step - loss: 8.9409 - mae: 2.3193 - val_loss: 11.7362 - val_mae: 2.6648\n",
            "Epoch 39/50\n",
            "819/819 [==============================] - 198s 241ms/step - loss: 8.9734 - mae: 2.3202 - val_loss: 11.4371 - val_mae: 2.6402\n",
            "Epoch 40/50\n",
            "819/819 [==============================] - 199s 242ms/step - loss: 8.9252 - mae: 2.3155 - val_loss: 11.0989 - val_mae: 2.5990\n",
            "Epoch 41/50\n",
            "819/819 [==============================] - 200s 244ms/step - loss: 8.8236 - mae: 2.2997 - val_loss: 11.7470 - val_mae: 2.6717\n",
            "Epoch 42/50\n",
            "819/819 [==============================] - 198s 241ms/step - loss: 8.8661 - mae: 2.3044 - val_loss: 11.4968 - val_mae: 2.6473\n",
            "Epoch 43/50\n",
            "819/819 [==============================] - 198s 241ms/step - loss: 8.7958 - mae: 2.2998 - val_loss: 11.1194 - val_mae: 2.6121\n",
            "Epoch 44/50\n",
            "819/819 [==============================] - 198s 242ms/step - loss: 8.8073 - mae: 2.3000 - val_loss: 11.6085 - val_mae: 2.6572\n",
            "Epoch 45/50\n",
            "819/819 [==============================] - 199s 243ms/step - loss: 8.7463 - mae: 2.2930 - val_loss: 11.4155 - val_mae: 2.6403\n",
            "Epoch 46/50\n",
            "819/819 [==============================] - 198s 241ms/step - loss: 8.6740 - mae: 2.2834 - val_loss: 12.0038 - val_mae: 2.7007\n",
            "Epoch 47/50\n",
            "819/819 [==============================] - 199s 243ms/step - loss: 8.6561 - mae: 2.2815 - val_loss: 11.6337 - val_mae: 2.6552\n",
            "Epoch 48/50\n",
            "819/819 [==============================] - 199s 242ms/step - loss: 8.6836 - mae: 2.2849 - val_loss: 11.6747 - val_mae: 2.6643\n",
            "Epoch 49/50\n",
            "819/819 [==============================] - 199s 242ms/step - loss: 8.7149 - mae: 2.2888 - val_loss: 11.3077 - val_mae: 2.6233\n",
            "Epoch 50/50\n",
            "819/819 [==============================] - 198s 242ms/step - loss: 8.6282 - mae: 2.2786 - val_loss: 11.5878 - val_mae: 2.6525\n",
            "816/816 [==============================] - 62s 75ms/step - loss: 10.2677 - mae: 2.4712\n",
            "Test MAE: 2.47\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "inputs=keras.Input(shape=(sequence_length, num_features))\n",
        "x=layers.LSTM(32, recurrent_dropout=0.2, unroll=True)(inputs)"
      ],
      "metadata": {
        "id": "Eo3aOO92Qlca"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Stacking recurrent layers\n",
        "\n",
        "Training and evaluating a dropout-regularized, stacked GRU model"
      ],
      "metadata": {
        "id": "REcpw3osQ0La"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "inputs=keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n",
        "x=layers.GRU(32, recurrent_dropout=0.5, return_sequences=True)(inputs)\n",
        "x=layers.GRU(32, recurrent_dropout=0.5)(x)\n",
        "x=layers.Dropout(0.5)(x)\n",
        "outputs=layers.Dense(1)(x)\n",
        "model=keras.Model(inputs, outputs)\n",
        "\n",
        "callbacks=[\n",
        "    keras.callbacks.ModelCheckpoint(\"jena_stacked_gru_dropout.keras\", save_best_only=True)\n",
        "]\n",
        "model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "history=model.fit(train_dataset,\n",
        "                  epochs=50,\n",
        "                  validation_data=val_dataset,\n",
        "                  callbacks=callbacks)\n",
        "\n",
        "model=keras.models.load_model(\"jena_stacked_gru_dropout.keras\")\n",
        "print(f\"Test MAE: {model.evaluate(test_dataset)[1]:.2f}\")"
      ],
      "metadata": {
        "id": "0YDBDqdHRLcq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "34488e65-749e-48ed-fd2d-7d90ed80c94e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "819/819 [==============================] - 305s 366ms/step - loss: 26.6046 - mae: 3.7837 - val_loss: 9.2653 - val_mae: 2.3470\n",
            "Epoch 2/50\n",
            "819/819 [==============================] - 302s 369ms/step - loss: 13.9631 - mae: 2.8954 - val_loss: 9.0180 - val_mae: 2.3252\n",
            "Epoch 3/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 13.1987 - mae: 2.8192 - val_loss: 8.8797 - val_mae: 2.3137\n",
            "Epoch 4/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 12.6403 - mae: 2.7600 - val_loss: 9.0662 - val_mae: 2.3427\n",
            "Epoch 5/50\n",
            "819/819 [==============================] - 300s 366ms/step - loss: 12.1114 - mae: 2.6990 - val_loss: 8.9477 - val_mae: 2.3215\n",
            "Epoch 6/50\n",
            "819/819 [==============================] - 297s 362ms/step - loss: 11.6752 - mae: 2.6522 - val_loss: 8.8708 - val_mae: 2.3020\n",
            "Epoch 7/50\n",
            "819/819 [==============================] - 295s 359ms/step - loss: 11.2715 - mae: 2.6055 - val_loss: 8.8240 - val_mae: 2.2961\n",
            "Epoch 8/50\n",
            "819/819 [==============================] - 294s 359ms/step - loss: 10.8860 - mae: 2.5612 - val_loss: 9.1239 - val_mae: 2.3453\n",
            "Epoch 9/50\n",
            "819/819 [==============================] - 294s 358ms/step - loss: 10.5671 - mae: 2.5222 - val_loss: 9.1582 - val_mae: 2.3560\n",
            "Epoch 10/50\n",
            "819/819 [==============================] - 294s 358ms/step - loss: 10.2377 - mae: 2.4823 - val_loss: 9.3388 - val_mae: 2.3754\n",
            "Epoch 11/50\n",
            "819/819 [==============================] - 293s 357ms/step - loss: 9.9338 - mae: 2.4471 - val_loss: 9.6152 - val_mae: 2.4137\n",
            "Epoch 12/50\n",
            "819/819 [==============================] - 293s 357ms/step - loss: 9.7041 - mae: 2.4165 - val_loss: 9.6400 - val_mae: 2.4093\n",
            "Epoch 13/50\n",
            "819/819 [==============================] - 293s 357ms/step - loss: 9.4593 - mae: 2.3846 - val_loss: 10.1096 - val_mae: 2.4791\n",
            "Epoch 14/50\n",
            "819/819 [==============================] - 294s 359ms/step - loss: 9.2990 - mae: 2.3663 - val_loss: 10.4105 - val_mae: 2.4979\n",
            "Epoch 15/50\n",
            "819/819 [==============================] - 294s 359ms/step - loss: 9.1059 - mae: 2.3409 - val_loss: 10.4797 - val_mae: 2.5339\n",
            "Epoch 16/50\n",
            "819/819 [==============================] - 295s 359ms/step - loss: 8.9245 - mae: 2.3181 - val_loss: 10.6706 - val_mae: 2.5529\n",
            "Epoch 17/50\n",
            "819/819 [==============================] - 294s 359ms/step - loss: 8.7920 - mae: 2.2975 - val_loss: 10.6059 - val_mae: 2.5440\n",
            "Epoch 18/50\n",
            "819/819 [==============================] - 294s 358ms/step - loss: 8.6506 - mae: 2.2835 - val_loss: 10.8057 - val_mae: 2.5791\n",
            "Epoch 19/50\n",
            "819/819 [==============================] - 293s 358ms/step - loss: 8.5260 - mae: 2.2666 - val_loss: 10.7369 - val_mae: 2.5485\n",
            "Epoch 20/50\n",
            "819/819 [==============================] - 295s 360ms/step - loss: 8.3959 - mae: 2.2461 - val_loss: 11.1260 - val_mae: 2.6015\n",
            "Epoch 21/50\n",
            "819/819 [==============================] - 298s 363ms/step - loss: 8.3234 - mae: 2.2388 - val_loss: 12.0553 - val_mae: 2.7125\n",
            "Epoch 22/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 8.2428 - mae: 2.2270 - val_loss: 11.5878 - val_mae: 2.6532\n",
            "Epoch 23/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 8.1579 - mae: 2.2186 - val_loss: 11.5258 - val_mae: 2.6582\n",
            "Epoch 24/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 8.1198 - mae: 2.2114 - val_loss: 11.8472 - val_mae: 2.6971\n",
            "Epoch 25/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 8.0305 - mae: 2.2021 - val_loss: 11.3333 - val_mae: 2.6150\n",
            "Epoch 26/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 7.9577 - mae: 2.1875 - val_loss: 11.3254 - val_mae: 2.6329\n",
            "Epoch 27/50\n",
            "819/819 [==============================] - 306s 373ms/step - loss: 7.8723 - mae: 2.1772 - val_loss: 11.6729 - val_mae: 2.6616\n",
            "Epoch 28/50\n",
            "819/819 [==============================] - 302s 369ms/step - loss: 7.8480 - mae: 2.1746 - val_loss: 11.9087 - val_mae: 2.6940\n",
            "Epoch 29/50\n",
            "819/819 [==============================] - 302s 368ms/step - loss: 7.7489 - mae: 2.1592 - val_loss: 11.4991 - val_mae: 2.6387\n",
            "Epoch 30/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 7.7170 - mae: 2.1565 - val_loss: 12.6668 - val_mae: 2.7984\n",
            "Epoch 31/50\n",
            "819/819 [==============================] - 301s 368ms/step - loss: 7.6611 - mae: 2.1471 - val_loss: 11.7708 - val_mae: 2.6815\n",
            "Epoch 32/50\n",
            "819/819 [==============================] - 301s 368ms/step - loss: 7.6255 - mae: 2.1421 - val_loss: 12.3700 - val_mae: 2.7300\n",
            "Epoch 33/50\n",
            "819/819 [==============================] - 304s 370ms/step - loss: 7.5392 - mae: 2.1309 - val_loss: 11.8441 - val_mae: 2.6705\n",
            "Epoch 34/50\n",
            "819/819 [==============================] - 301s 368ms/step - loss: 7.4730 - mae: 2.1210 - val_loss: 12.1261 - val_mae: 2.6997\n",
            "Epoch 35/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 7.4919 - mae: 2.1225 - val_loss: 12.4081 - val_mae: 2.7489\n",
            "Epoch 36/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 7.4069 - mae: 2.1090 - val_loss: 12.4687 - val_mae: 2.7473\n",
            "Epoch 37/50\n",
            "819/819 [==============================] - 301s 368ms/step - loss: 7.3643 - mae: 2.1056 - val_loss: 12.2282 - val_mae: 2.7275\n",
            "Epoch 38/50\n",
            "819/819 [==============================] - 301s 367ms/step - loss: 7.3476 - mae: 2.1024 - val_loss: 12.9742 - val_mae: 2.8093\n",
            "Epoch 39/50\n",
            "819/819 [==============================] - 303s 369ms/step - loss: 7.3206 - mae: 2.0994 - val_loss: 12.3848 - val_mae: 2.7422\n",
            "Epoch 40/50\n",
            "819/819 [==============================] - 305s 372ms/step - loss: 7.2908 - mae: 2.0940 - val_loss: 12.4462 - val_mae: 2.7493\n",
            "Epoch 41/50\n",
            "819/819 [==============================] - 305s 372ms/step - loss: 7.2324 - mae: 2.0852 - val_loss: 12.1198 - val_mae: 2.7220\n",
            "Epoch 42/50\n",
            "819/819 [==============================] - 304s 371ms/step - loss: 7.1932 - mae: 2.0789 - val_loss: 13.0160 - val_mae: 2.8207\n",
            "Epoch 43/50\n",
            "819/819 [==============================] - 303s 370ms/step - loss: 7.1732 - mae: 2.0752 - val_loss: 12.7514 - val_mae: 2.7783\n",
            "Epoch 44/50\n",
            "819/819 [==============================] - 302s 369ms/step - loss: 7.1628 - mae: 2.0713 - val_loss: 12.8993 - val_mae: 2.8111\n",
            "Epoch 45/50\n",
            "819/819 [==============================] - 303s 370ms/step - loss: 7.1637 - mae: 2.0731 - val_loss: 12.8235 - val_mae: 2.8044\n",
            "Epoch 46/50\n",
            "819/819 [==============================] - 304s 370ms/step - loss: 7.1161 - mae: 2.0678 - val_loss: 12.4778 - val_mae: 2.7658\n",
            "Epoch 47/50\n",
            "819/819 [==============================] - 304s 371ms/step - loss: 7.0989 - mae: 2.0632 - val_loss: 13.1960 - val_mae: 2.8336\n",
            "Epoch 48/50\n",
            "819/819 [==============================] - 304s 371ms/step - loss: 7.0622 - mae: 2.0608 - val_loss: 12.8362 - val_mae: 2.7967\n",
            "Epoch 49/50\n",
            "819/819 [==============================] - 305s 373ms/step - loss: 7.0325 - mae: 2.0540 - val_loss: 12.6482 - val_mae: 2.7776\n",
            "Epoch 50/50\n",
            "819/819 [==============================] - 303s 370ms/step - loss: 7.0347 - mae: 2.0541 - val_loss: 12.4151 - val_mae: 2.7542\n",
            "816/816 [==============================] - 78s 95ms/step - loss: 9.2138 - mae: 2.3717\n",
            "Test MAE: 2.37\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Using bidirectional RNNs\n",
        "\n",
        "Training and evaluating a biderctional LSTM"
      ],
      "metadata": {
        "id": "KOgqTDdOUrj6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inputs=keras.Input(shape=(sequence_length, raw_data.shape[-1]))\n",
        "x=layers.Bidirectional(layers.LSTM(16))(inputs)\n",
        "outputs=layers.Dense(1)(x)\n",
        "model=keras.Model(inputs, outputs)\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "history=model.fit(train_dataset,\n",
        "                  epochs=10,\n",
        "                  validation_data=val_dataset)"
      ],
      "metadata": {
        "id": "A9bDXchwUq96",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8c90daa8-1b60-42ff-e491-2d95a4f84cb9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "819/819 [==============================] - 154s 182ms/step - loss: 26.6793 - mae: 3.7054 - val_loss: 10.3112 - val_mae: 2.4888\n",
            "Epoch 2/10\n",
            "819/819 [==============================] - 149s 182ms/step - loss: 9.7061 - mae: 2.4311 - val_loss: 9.7219 - val_mae: 2.4298\n",
            "Epoch 3/10\n",
            "819/819 [==============================] - 149s 182ms/step - loss: 8.7831 - mae: 2.3070 - val_loss: 9.4242 - val_mae: 2.3871\n",
            "Epoch 4/10\n",
            "819/819 [==============================] - 150s 183ms/step - loss: 8.2169 - mae: 2.2325 - val_loss: 9.6528 - val_mae: 2.4148\n",
            "Epoch 5/10\n",
            "819/819 [==============================] - 150s 183ms/step - loss: 7.7911 - mae: 2.1773 - val_loss: 9.7545 - val_mae: 2.4218\n",
            "Epoch 6/10\n",
            "819/819 [==============================] - 149s 181ms/step - loss: 7.4854 - mae: 2.1361 - val_loss: 9.7416 - val_mae: 2.4177\n",
            "Epoch 7/10\n",
            "819/819 [==============================] - 152s 185ms/step - loss: 7.2365 - mae: 2.0981 - val_loss: 10.5224 - val_mae: 2.4991\n",
            "Epoch 8/10\n",
            "819/819 [==============================] - 151s 184ms/step - loss: 7.0142 - mae: 2.0663 - val_loss: 10.1587 - val_mae: 2.4668\n",
            "Epoch 9/10\n",
            "819/819 [==============================] - 151s 185ms/step - loss: 6.8405 - mae: 2.0406 - val_loss: 10.1713 - val_mae: 2.4758\n",
            "Epoch 10/10\n",
            "819/819 [==============================] - 150s 183ms/step - loss: 6.6774 - mae: 2.0155 - val_loss: 10.4116 - val_mae: 2.4966\n"
          ]
        }
      ]
    }
  ]
}